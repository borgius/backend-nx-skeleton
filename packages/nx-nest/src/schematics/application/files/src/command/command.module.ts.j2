import { Module } from '@nestjs/common'
import { CommandModule } from 'nestjs-command'
{% if database is defined and enum.dbAdapters.TYPEORM in database %}
import { TypeOrmModule } from '@nestjs/typeorm'
{% elif database is defined and enum.dbAdapters.MONGOOSE in database %}
import { MongooseModule } from '@nestjs/mongoose'
{% endif %}

import {
  ConfigService,
  {% if enum.components.MICROSERVICE_CLIENT in components %}
  MicroserviceProviderModule
  {% endif %}
} from '@webundsoehne/nestjs-util'

import * as modules from './modules'

/**
 * Register all services under providers
 */

@Module({
  providers: [
    ConfigService,
    {% if database is defined and enum.dbAdapters.TYPEORM in database %}
    TypeOrmModule.forRoot(getDatabaseOptions(mock)),
    {% elif database is defined and enum.dbAdapters.MONGOOSE in database %}
    MongooseModule.forRoot(...getDatabaseOptions(mock)),
    {% endif %}
    {% if enum.components.MICROSERVICE_CLIENT in components %}
    MicroserviceProviderModule.forRoot({ queue: [ {% for client in microserviceClient %}MessageQueues.{{ microserviceCasing[client].names.queue }}{% endfor %} ] }),
    {% endif %},
    ...Object.values(modules)
    ],
  imports: [ CommandModule ]
})
export class AppCommandModule {}
