import { NestFactory } from '@nestjs/core'
{% if serverAdapter == enum.serverAdapter.FASTIFY %}
import type { NestFastifyApplication } from '@nestjs/platform-fastify'
import { FastifyAdapter } from '@nestjs/platform-fastify'
{% endif %}
{% if serverAdapter == enum.serverAdapter.EXPRESS %}
import type { NestExpressApplication } from '@nestjs/platform-express'
import { ExpressAdapter } from '@nestjs/platform-express'
{% endif %}

import { createServerModule } from './server.module'
import { LoggerService, ConfigService } from '@webundsoehne/nestjs-util'
{% if server == enum.server.RESTFUL %}
import { SwaggerService } from '@webundsoehne/nestjs-util-restful'
{% endif %}

export async function createApplication (): Promise<void> {
  const app = await NestFactory.create<{% if serverAdapter == enum.serverAdapter.FASTIFY %}NestFastifyApplication{% endif %}{% if serverAdapter == enum.serverAdapter.EXPRESS %}NestExpressApplication{% endif %}>(createServerModule(), new {% if serverAdapter == enum.serverAdapter.FASTIFY %}FastifyAdapter{% endif %}{% if serverAdapter == enum.serverAdapter.EXPRESS %}ExpressAdapter{% endif %}(), {
    logger: new LoggerService()
  })

  const port: number = ConfigService.get('port') ?? 3000
  const prefix: string = ConfigService.get('url.apiPath') ?? ''

{% if serverAdapter == enum.serverAdapter.FASTIFY %}
  // app.enableCors()
{% endif %}
{% if serverAdapter == enum.serverAdapter.EXPRESS %}
  app.enableCors()
{% endif %}

  app.setGlobalPrefix(prefix)

  {% if server == enum.server.RESTFUL %}
  SwaggerService.enable(app)
  {% endif %}

  await app.listen(port, '0.0.0.0')
}
