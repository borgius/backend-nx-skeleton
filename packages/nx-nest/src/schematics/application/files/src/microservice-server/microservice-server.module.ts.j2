import { RpcGlobalExceptionFilter, ExtendedValidationPipe } from '@webundsoehne/nestjs-util'
import { Module, NestModule, ClassSerializerInterceptor } from '@nestjs/common'
import { APP_FILTER, APP_PIPE, APP_INTERCEPTOR } from '@nestjs/core'
import { TypeOrmModule } from '@nestjs/typeorm'

import * as modules from './modules'
{% if database is defined and database != 'none' %}
import { getDatabaseOptions } from '@util/database'
{% endif %}

export function createMicroserviceModule ({% if database != 'none' %}mock = false{% endif %}): new({% if database != 'none' %}mock : boolean{% endif %}) => NestModule {
  @Module({
    providers: [
      {
        provide: APP_PIPE,
        useClass: ExtendedValidationPipe
      },
      {
        provide: APP_INTERCEPTOR,
        useClass: ClassSerializerInterceptor
      },
      {
        provide: APP_FILTER,
        useClass: RpcGlobalExceptionFilter
      }
    ],
    imports: [
    {% if 'typeorm' in database %}
      TypeOrmModule.forRoot(getDatabaseOptions(mock)),
      {% elif 'mongoose-mongodb' == database %}
      MongooseModule.forRoot(...getDatabaseOptions(mock)),
      {% endif %}
    ...Object.values(modules)
    ]
  })
  class MicroservicesModule implements NestModule {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async configure (): Promise<any> {}
  }

  return MicroservicesModule
}
