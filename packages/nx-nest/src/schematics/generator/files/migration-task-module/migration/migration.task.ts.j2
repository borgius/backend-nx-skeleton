import { Injectable, Logger } from '@nestjs/common'
import { Timeout } from '@nestjs/schedule'
{% if inject.dbAdapters == inject.enum.dbAdapters.TYPEORM %}
import { InjectConnection } from '@nestjs/typeorm'
import { Connection } from 'typeorm'
{% endif %}
{% if inject.dbAdapters == inject.enum.dbAdapters.MONGOOSE %}
import { config, database, up } from 'migrate-mongo'

import * as generateMongooseMigrateConfig from '@{{ packageScope }}/{{ inject.constants.BACKEND_DATABASE_PACKAGE }}/database/migrate-mongoose'
{% endif %}

import { InjectMaintenanceService, MaintenanceService, Retry, UseMaintenanceLocker } from '@webundsoehne/nestjs-util'

@Injectable()
export class MigrationTask {
  private readonly logger: Logger = new Logger(this.constructor.name)

{% if inject.dbAdapters == inject.enum.dbAdapters.TYPEORM %}
  constructor (@InjectConnection() private readonly connection: Connection) {}
{% endif %}

{% if inject.dbAdapters == inject.enum.dbAdapters.TYPEORM %}
  @Timeout(0)
  @UseMaintenanceLocker()
  @Retry({
    retry: 24,
    interval: 3 * 1000
  })
  async migrateTypeOrm (): Promise<void> {
    try {
      await this.connection.runMigrations({ transaction: 'all' })
    } catch (error) {
      this.logger.error(error.message)

      throw error
    }
  }
{% endif %}

{% if inject.dbAdapters == inject.enum.dbAdapters.MONGOOSE %}
  @Timeout(0)
  @UseMaintenanceLocker()
  @Retry({
    retry: 24,
    interval: 3 * 1000
  })
  async migrateMongoose (): Promise<void> {
    try {
      config.set(generateMongooseMigrateConfig)

      const { db, client } = await database.connect()
      const migrated = await up(db, client)

      if (migrated.length > 0) {
        migrated.forEach((filename) => this.logger.verbose([ 'Migrated: %s', filename ]))
      } else {
        this.logger.verbose('No pending migration found.')
      }
    } catch (exception) {
      this.logger.error(exception.message)

      throw exception
    }
  }
{% endif %}
}
