import type { NormalizedSchema as ApplicationNormalizedSchema } from '@schematics/application/main.interface'
import type { ExtensionsMap, PrettyNames } from '@webundsoehne/nx-tools'
import { PrettyNamesDefault } from '@webundsoehne/nx-tools'

/**
 * All the available components that can be generated by this schematic.
 */
export enum AvailableComponents {
  SERVER = 'server',
  COMMAND = 'command',
  BG_TASK = 'bgtask',
  MICROSERVICE_CLIENT = 'microservice-client',
  MICROSERVICE_SERVER = 'microservice-server'
}

/**
 * If server component is selected, these are the options to serve as a server.
 */
export enum AvailableServerTypes {
  RESTFUL = 'restful',
  GRAPHQL = 'graphql'
}

/**
 * If server component is selected, these are the options to use as an adapter.
 */
export enum AvailableServerAdapters {
  EXPRESS = 'express',
  FASTIFY = 'fastify'
}

/**
 * Database can be selected for various parts of the application.
 * This is the database available that can be automatically injected.
 */
export enum AvailableDBTypes {
  NONE = 'none',
  TYPEORM_MYSQL = 'typeorm-mysql',
  TYPEORM_POSTGRESQL = 'typeorm-postgresql',
  MONGOOSE_MONGODB = 'mongoose-mongodb'
}

/**
 * Database adapters, these are not selectable but used in internal scripts.
 */
export enum AvailableDBAdapters {
  TYPEORM = 'typeorm',
  MONGOOSE = 'mongoose'
}

/**
 * Available microservice types after selecting microservice-server as component.
 */
export enum AvailableMicroserviceTypes {
  RMQ = 'rmq'
}

/**
 * Available extensions to further customize the application.
 */
export enum AvailableExtensions {
  EXTERNAL_BACKEND_INTERFACES = 'external-backend-interfaces',
  EXTERNAL_BACKEND_DATABASE = 'external-backend-database'
}

export const AvailableExtensionsMap: ExtensionsMap<typeof AvailableExtensions, ApplicationNormalizedSchema> = {
  [AvailableExtensions.EXTERNAL_BACKEND_INTERFACES]: {
    condition: true
  },
  [AvailableExtensions.EXTERNAL_BACKEND_DATABASE]: {
    condition: (options) => !!options.dbAdapters
  }
}

/**
 * Available through generating through the generator.
 * Just typing it so that it can be called as an external schematic.
 * It does not directly use these types since it globs the directory.
 */
export enum AvailableGenerators {
  MONGOOSE_ENTITY = 'mongoose-entity',
  MONGOOSE_ENTITY_TIMESTAMPS = 'mongoose-entity-timestamps',
  TYPEORM_ENTITY = 'typeorm-entity',
  TYPEORM_ENTITY_PRIMARY = 'typeorm-entity-with-primary',
  MIGRATION_TASK_MODULE = 'migration-task-module',
  BACKEND_DATABASE_SEED_COMMAND = 'backend-database-seed-command'
}

/**
 * Prettified names for components to use with prompts and such.
 */
export const PrettyNamesForAvailableThingies: PrettyNames<
AvailableComponents | AvailableServerTypes | AvailableServerAdapters | AvailableDBTypes | AvailableMicroserviceTypes | AvailableExtensions
> = {
  [AvailableComponents.SERVER]: 'Server',
  [AvailableComponents.COMMAND]: 'Command',
  [AvailableComponents.BG_TASK]: 'Scheduler',
  [AvailableComponents.MICROSERVICE_CLIENT]: 'Microservice Client',
  [AvailableComponents.MICROSERVICE_SERVER]: 'Microservice Server',
  [AvailableServerTypes.GRAPHQL]: 'GraphQL Server',
  [AvailableServerTypes.RESTFUL]: 'Restful Server',
  [AvailableDBTypes.NONE]: 'None',
  [AvailableDBTypes.TYPEORM_MYSQL]: 'MySQL with TypeORM',
  [AvailableDBTypes.TYPEORM_POSTGRESQL]: 'PostgreSQL with TypeORM',
  [AvailableDBTypes.MONGOOSE_MONGODB]: 'MongoDB with Mongoose',
  [AvailableMicroserviceTypes.RMQ]: 'RabbitMQ',
  [AvailableExtensions.EXTERNAL_BACKEND_INTERFACES]: 'Use external backend interfaces library',
  [AvailableExtensions.EXTERNAL_BACKEND_DATABASE]: 'Use external backend database library',
  [AvailableServerAdapters.EXPRESS]: 'express.js',
  [AvailableServerAdapters.FASTIFY]: 'fastify',
  ...PrettyNamesDefault
}
