/* eslint-disable @typescript-eslint/naming-convention */

import { Linter } from '@nrwl/workspace'

/**
 * All the available components that can be generated by this schematic.
 */
export enum AvailableComponents {
  SERVER = 'server',
  COMMAND = 'command',
  BG_TASK = 'bgtask',
  MICROSERVICE_CLIENT = 'microservice-client',
  MICROSERVICE_SERVER = 'microservice-server'
}

/**
 * If server component is selected, these are the options to serve as a server.
 */
export enum AvailableServerTypes {
  RESTFUL = 'restful',
  GRAPHQL = 'graphql'
}

/**
 * Database can be selected for various parts of the application.
 * This is the database available that can be automatically injected.
 */
export enum AvailableDBTypes {
  NONE = 'none',
  TYPEORM_MYSQL = 'typeorm-mysql',
  TYPEORM_POSTGRESQL = 'typeorm-postgresql',
  MONGOOSE_MONGODB = 'mongoose-mongodb'
}

/**
 * Available test configurations.
 */
export enum AvailableTestsTypes {
  NONE = 'none',
  JEST = 'jest'
}

/**
 * Available microservice types after selecting microservice-server as component.
 */
export enum AvailableMicroserviceTypes {
  RMQ = 'rmq'
}

/**
 * Available Linters
 */
export type AvailableLinterTypes = Exclude<Linter, 'tslint'>

//  Prettified names for components to use with prompts and such.
export const PrettyNamesForAvailableThingies: Record<
| keyof typeof AvailableComponents
| keyof typeof AvailableServerTypes
| keyof typeof AvailableDBTypes
| keyof typeof AvailableTestsTypes
| keyof typeof AvailableMicroserviceTypes,
string
> = {
  SERVER: 'Server',
  COMMAND: 'Command',
  BG_TASK: 'Scheduler',
  MICROSERVICE_CLIENT: 'Microservice Client',
  MICROSERVICE_SERVER: 'Microservice Server',
  GRAPHQL: 'GraphQL Server',
  RESTFUL: 'Restful Server',
  NONE: 'None',
  TYPEORM_MYSQL: 'MySQL with TypeORM',
  TYPEORM_POSTGRESQL: 'PostgreSQL with TypeORM',
  MONGOOSE_MONGODB: 'MongoDB with Mongoose',
  JEST: 'Jest',
  RMQ: 'RabbitMQ'
}
