import { FactoryProvider } from '@nestjs/common'
import { RuntimeException } from '@nestjs/core/errors/exceptions/runtime.exception'
import { ClientProxyFactory } from '@nestjs/microservices'

export interface MicroserviceProviderModuleOptions {
  /** give a inject token of your desire  */
  name?: string | symbol
  /** queue names as string, will be autogenerated with the client module */
  queue: string[]
  /** if you want to override the default provider */
  provider?: (queue?: string[]) => FactoryProvider<ClientProxyFactory>[]
}

export interface MicroserviceProviderServiceOptions {
  /** add timeout functionality to the message queue */
  timeout?: number
}

/**
 * This is the base format which a message queue maps for request responses can be supplied.
 */
// FIXME: this needs fixing but, but can not type the patterns without typescript going crazy
export type MicroserviceProviderBaseMessage<Pattern extends Record<string, string>> = Record<
ValueOf<Pattern>,
{ request: any | never, response: any | never }
>

/**
 * A timeout exception for message queue internally.
 */
export class TimeoutException extends RuntimeException {
  constructor (name: string) {
    super(`Request to service "${name}" timed out.`)
  }
}

/**
 * Returns the value of a key from a type map.
 */
export type GetKeyFromTypeMap<P extends any, T extends string | number> = T extends keyof P ? P[T] : never

/**
 * Returns the value of the given key.
 */
export type ValueOf<T> = T[keyof T]
