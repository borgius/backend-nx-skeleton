#!/bin/bash

VERSION=202105261753

source <(curl -s "https://gist.githubusercontent.com/cenk1cenk2/e03d8610534a9c78f755c1c1ed93a293/raw/logger.sh")

SCRIPT_NAME="${YELLOW}run-in-docker${RESET}"

print_header() {
	log_this "${VERSION}-online" "${SCRIPT_NAME}" "LIFETIME" "bottom"
}

run_cli() {
	# SCRIPT
	trap trap_int INT
	function trap_int() {
		log_interrupt "${PACKAGE_INFO}" "top"
	}

	# throw default error
	if [ -z "$1" ] && [ -z "${WORKSPACE_ONLY}" ]; then
		log_error "Please state a package folder relative to '${PACKAGE_FOLDER}'."
		exit 127
	fi

	# check command
	[[ $1 == "run-outside" ]] && shift && IS_RUN_OUTSIDE=true
	IS_WORKSPACE=$([[ $1 == "root" || $1 == "ws" || $1 == "." ]] && echo true)
	IS_FORALL=$([[ $1 == "all" ]] && echo true)
	IS_LERNA=$([[ $1 == "lerna" ]] && echo true)

	# parse command
	if [ -z "$WORKSPACE_ONLY" ] && [ ! -z "$ENABLE_LERNA" ]; then
		PACKAGES=$(npx lerna la)
		PACKAGE=($(echo ${PACKAGES} | grep $1 | sed -r 's/^([^ ]*).*$/\1/'))
	elif [ -z "$WORKSPACE_ONLY" ] && [ -z "$ENABLE_LERNA" ]; then
		PACKAGE="$1"
		PACKAGES=$(ls -d */ | tr '\n' ' ')
	else
		IS_WORKSPACE=true
	fi

	# ls command
	if [ "$1" == "ls" ] && [ -z "$WORKSPACE_ONLY" ]; then
		log_info "Available packages are:"
		echo "$PACKAGES"
		exit 0
	fi

	# throw error when packages are missing
	if [[ -z ${PACKAGE} && -z ${IS_WORKSPACE} && -z ${IS_FORALL} && -z ${IS_LERNA} ]]; then
		log_error "Can not find ${PACKAGE} in directory."
		log_info "Available packages are:"
		echo "${PACKAGES}"
		exit 127
	fi

	# where to run
	if [[ -n ${IS_WORKSPACE} || -n ${IS_FORALL} || -n ${IS_LERNA} ]]; then
		PACKAGE="workspace"
		WORKDIR="."
	else
		WORKDIR="${PACKAGE_FOLDER}/$1"
	fi

	# command
	if [ -z "${WORKSPACE_ONLY}" ]; then
		if [ -n "${IS_FORALL}" ]; then
			if [ -n "${ENABLE_LERNA}" ]; then
				RUN_COMMAND="npx lerna exec -- ${*:2}"
			else
				log_error "Lerna is not enabled, can not use this command."
				exit 127
			fi
		elif [ -n "${IS_LERNA}" ]; then
			if [ -n "${ENABLE_LERNA}" ]; then
				RUN_COMMAND="npx lerna ${*:2}"
			else
				log_error "Lerna is not enabled, can not use this command."
				exit 127
			fi
		else
			RUN_COMMAND="${*:2}"
		fi
	else
		RUN_COMMAND="${*:1}"
	fi

	# run command missing
	if [ -z "${RUN_COMMAND}" ]; then
		log_error "Please state a command to run in '${PACKAGE}'."
		exit 127
	fi

	PACKAGE_INFO="${PACKAGE} in ${WORKDIR} | \$ ${RUN_COMMAND}"
	if [ -z "${IS_RUN_OUTSIDE}" ]; then
		docker-compose exec ${CONTAINER_NAME} /bin/bash -c "echo -e '[${GREEN}START${RESET}] ${PACKAGE_INFO}\n${SEPARATOR}' && cd ${WORKDIR}; if [ -f .env ]; then source .env && echo -e '[${YELLOW}env${RESET}] Sourced .env file.\n${SEPARATOR}'; fi && ${RUN_COMMAND} && echo -e '${SEPARATOR}\n[${GREEN}FINISH${RESET}] ${PACKAGE_INFO}' || echo -e '${SEPARATOR}\n[${RED}ERROR${RESET}] ${PACKAGE_INFO}'"
	else
		log_info "Running outside docker..." && echo -e "[${GREEN}START${RESET}] ${PACKAGE_INFO}\n${SEPARATOR}" && cd ${WORKDIR}
		if [ -f .env ]; then source .env && echo -e "[${YELLOW}env${RESET}] Sourced .env file.\n${SEPARATOR}"; fi && ${RUN_COMMAND} && echo -e "${SEPARATOR}\n[${GREEN}FINISH${RESET}] ${PACKAGE_INFO}" || echo -e "${SEPARATOR}\n[${RED}ERROR${RESET}] ${PACKAGE_INFO}"
	fi
}

print_header

# VARIABLES
PACKAGE_FOLDER=.
CONTAINER_NAME=nx
WORKSPACE_ONLY=
ENABLE_LERNA=

run_cli ${*:1}
